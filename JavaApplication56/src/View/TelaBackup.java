package View;

/**
 *
 * @author MadaraX4
 *
 */
import ConnectionFactory.Backup;
import ConnectionFactory.ConexaoBanco;
import Estilo.BotaoRedondo;
import com.formdev.flatlaf.FlatLightLaf;
import java.awt.Toolkit;
import java.io.File;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class TelaBackup extends javax.swing.JFrame {

    /**
     * Creates new form TelaBackup
     */
    public TelaBackup() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/48x48.png")));

        lblTitulo.setText("Efeatuar ou Restaurar Backup!");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        btnEfetuarBackup = new BotaoRedondo();
        btnRestaurarBackup = new BotaoRedondo();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Backup");

        jPanel1.setBackground(new java.awt.Color(153, 255, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        lblTitulo.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(0, 0, 0));
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("titulo");
        lblTitulo.setBorder(javax.swing.BorderFactory.createCompoundBorder());

        btnEfetuarBackup.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnEfetuarBackup.setText("EFETUAR BACKUP");
        btnEfetuarBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEfetuarBackupActionPerformed(evt);
            }
        });

        btnRestaurarBackup.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnRestaurarBackup.setText("RESTAURAR BACKUP");
        btnRestaurarBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestaurarBackupActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnEfetuarBackup, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88)
                        .addComponent(btnRestaurarBackup, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo)
                .addGap(67, 67, 67)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEfetuarBackup, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                    .addComponent(btnRestaurarBackup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 550, 250));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnEfetuarBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEfetuarBackupActionPerformed
        // TODO add your handling code here:
        try {
            // Instanciando a classe Backup
            Backup backup = new Backup();
            String database = "JpMarket"; // Nome do banco de dados

            // Obtendo a data de hoje
            LocalDate data = LocalDate.now();
            DateTimeFormatter df = DateTimeFormatter.ofPattern("dd/MM/yyyy");

            // Caminho para a pasta "backup" dentro da Área de Trabalho
            Path desktopPath = Paths.get(System.getProperty("user.home"), "Desktop", "backup");

            // Criando a pasta "backup" se não existir
            if (!Files.exists(desktopPath)) {
                Files.createDirectories(desktopPath); // Cria a pasta "backup" no Desktop
                JOptionPane.showMessageDialog(null, "Pasta 'backup' criada com sucesso!");
            }

            // Caminho do arquivo de backup dentro da pasta "backup"
            Path backupPath = desktopPath.resolve("backup.sql");

            // Perguntando ao usuário se deseja realizar o backup
            int confirm = JOptionPane.showConfirmDialog(null,
                    "Deseja efetuar o backup até a data de hoje " + df.format(data) + "?",
                    "Confirmação!",
                    JOptionPane.YES_NO_OPTION);

            // Se o usuário confirmar, realiza o backup
            if (confirm == JOptionPane.YES_OPTION) {
                backup.realizarBackup(database, backupPath.toString());
                JOptionPane.showMessageDialog(null, "Backup realizado com sucesso!");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao realizar o backup: " + e.getMessage());
            e.printStackTrace();
        }


    }//GEN-LAST:event_btnEfetuarBackupActionPerformed

    private void btnRestaurarBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestaurarBackupActionPerformed
        // TODO add your handling code here:

        try {
            // Instanciando a classe Backup
            Backup backup = new Backup();
            String database = "JpMarket"; // Nome do banco de dados

            // Caminho para a pasta "backup" dentro da Área de Trabalho
            String userHome = System.getProperty("user.home");
            Path backupFolder = Paths.get(userHome, "Desktop", "backup");

            // Verificando se a pasta "backup" existe
            if (!Files.exists(backupFolder)) {
                JOptionPane.showMessageDialog(null, "A pasta 'backup' não foi encontrada na Área de Trabalho.");
                return; // Se a pasta não existir, sai do método
            }

            // Caminho para a subpasta "backup.sql" dentro da pasta "backup"
            Path backupSubfolder = backupFolder.resolve("backup.sql");

            // Verificando se a subpasta "backup.sql" existe
            if (!Files.exists(backupSubfolder)) {
                JOptionPane.showMessageDialog(null, "A subpasta 'backup.sql' não foi encontrada dentro da pasta 'backup'.");
                return;
            }

            // Caminho completo do arquivo de backup dentro da subpasta "backup.sql"
            Path backupFile = backupSubfolder.resolve("backup.sql");

            // Verificando se o arquivo de backup existe
            if (!Files.exists(backupFile)) {
                JOptionPane.showMessageDialog(null, "O arquivo de backup não foi encontrado na pasta 'backup/sql'.");
                return;
            }

            // Exibe o caminho do arquivo para depuração
            System.out.println("Caminho do arquivo de backup: " + backupFile.toString());

            // Perguntando ao usuário se deseja restaurar o último backup
            int confirm = JOptionPane.showConfirmDialog(null,
                    "Deseja restaurar o último backup?",
                    "Confirmação!",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

            // Se o usuário confirmar, realiza a restauração
            if (confirm == JOptionPane.YES_OPTION) {
                backup.restaurarBackup(database, backupFile.toString());
                JOptionPane.showMessageDialog(null, "Backup restaurado com sucesso!");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao restaurar o backup: " + e.getMessage());
            e.printStackTrace();
        }


    }//GEN-LAST:event_btnRestaurarBackupActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (Exception ex) {
            System.err.println("Failed to initialize LaF");
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaBackup().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEfetuarBackup;
    private javax.swing.JButton btnRestaurarBackup;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblTitulo;
    // End of variables declaration//GEN-END:variables
}
